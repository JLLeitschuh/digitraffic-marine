<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>fi.fta.digitraffic</groupId>
    <artifactId>AIS</artifactId>
    <version>1.8.0</version>
    <packaging>jar</packaging>

    <name>dt-ais</name>
    <description>Digitraffic AIS</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.7.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
    </properties>

    <!-- Download OJDBC7.jar, ons.jar and ucp.jar and install drivers to local repo
         $ mvn install:install-file -DgroupId=com.oracle.jdbc -DartifactId=<name> \
         -Dversion=12.1.0.2 -Dpackaging=jar  -DgeneratePom=true -Dfile=<filename>
         OR add repository below that contains the drivers -->
    <repositories>
        <!-- PLACEHOLDER -->
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.glassfish.tyrus.bundles</groupId>
            <artifactId>tyrus-standalone-client</artifactId>
            <version>1.13.1</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.json</artifactId>
            <version>1.1</version>
        </dependency>

        <!--= Compile/Provided/Runtime/System dependencies, in groupId alphabethic order =-->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>2.9.1</version>
        </dependency>

        <!-- Static Reader of META-INF/MANIFEST.MF Files -->
        <dependency>
            <groupId>com.jcabi</groupId>
            <artifactId>jcabi-manifests</artifactId>
            <version>1.1</version>
        </dependency>

        <!-- Swagger2 JSON API specification generation-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.7.0</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.7.0</version>
        </dependency>

        <dependency>
            <groupId>com.oracle.jdbc</groupId>
            <artifactId>ojdbc7</artifactId>
            <version>12.1.0.2</version>
        </dependency>

        <dependency>
            <groupId>com.oracle.jdbc</groupId>
            <artifactId>ucp</artifactId>
            <version>12.1.0.2</version>
        </dependency>

        <dependency>
            <groupId>com.oracle.jdbc</groupId>
            <artifactId>ons</artifactId>
            <version>12.1.0.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.6</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.5</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <!-- Spring Boot Actuator for health page -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <version>3.4.0</version>
        </dependency>

        <dependency>
            <groupId>javax.cache</groupId>
            <artifactId>cache-api</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!-- Includes spring's support classes for quartz -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>

        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <!-- Versions from 2.2.1 on has loop bug on jdbc conection drop. Fixed by using 2.2.0-version
                 http://stackoverflow.com/questions/35761746/quartz-scheduler-unlimited-attempts-to-connect-with-database
                 https://jira.terracotta.org/jira/browse/QTZ-470 -->
            <version>2.2.0</version>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>javax.websocket</groupId>
            <artifactId>javax.websocket-api</artifactId>
            <version>1.1</version>
        </dependency>

        <dependency>
            <groupId>org.osgeo</groupId>
            <artifactId>proj4j</artifactId>
            <version>0.1.0</version>
        </dependency>

        <!-- JavaMelody -->
        <dependency>
            <groupId>net.bull.javamelody</groupId>
            <artifactId>javamelody-core</artifactId>
            <version>1.67.0</version>
        </dependency>

        <!--= Test dependencies, in groupId alphabethic order =-->
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>2.3</version>
        </dependency>

        <!-- gzipped http response -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>
    </dependencies>

    <!-- If you have access to scm then you can place actual url's.
         Otherwise with <revisionOnScmFailure /> you can give some fake URLs as follows. -->
    <scm>
        <connection>scm:git:http://none</connection>
        <developerConnection>scm:git:https://none</developerConnection>
        <url>scm:git:https://none</url>
    </scm>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <formats>
                        <format>xml</format>
                    </formats>
                    <instrumentation>
                        <ignoreTrivial>true</ignoreTrivial>
                        <ignoreMethodAnnotation>fi.livi.digitraffic.meri.annotation.CoverageIgnore</ignoreMethodAnnotation>
                        <excludes>
                            <exclude>fi/livi/digitraffic/meri/controller/websocket/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/controller/reader/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/config/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/quartz/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/portnet/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/domain/**/*.class</exclude>
                            <exclude>fi/livi/digitraffic/meri/model/**/*.class</exclude>
                        </excludes>
                    </instrumentation>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <executable>true</executable>
                </configuration>
            </plugin>
            <!-- generate build number -->
            <!--<plugin>-->
                <!--<groupId>org.codehaus.mojo</groupId>-->
                <!--<artifactId>buildnumber-maven-plugin</artifactId>-->
                <!--<version>1.4</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>generate-buildNumber</id>-->
                        <!--<phase>validate</phase>-->
                        <!--<goals>-->
                            <!--<goal>create</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
                <!--<configuration>-->
                    <!--<doCheck>false</doCheck>-->
                    <!--<doUpdate>false</doUpdate>-->
                    <!--&lt;!&ndash; This ensures that even if we are not connected to scm the revision is generated &ndash;&gt;-->
                    <!--<revisionOnScmFailure />-->
                    <!--<format>{0}</format>-->
                    <!--&lt;!&ndash;<format>{0,date,yyyy-MM-dd_HH:mm:ss}</format>&ndash;&gt;-->
                    <!--<items>-->
                        <!--&lt;!&ndash;<item>timestamp</item>&ndash;&gt;-->
                        <!--<item>buildNumber</item>-->
                    <!--</items>-->
                <!--</configuration>-->
            <!--</plugin>-->

            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>validate-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>

                <configuration>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <prefix>git</prefix>
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>
                    <dateFormatTimeZone>${user.timezone}</dateFormatTimeZone>
                    <!-- false is default here, it prints some more information during the build -->
                    <verbose>false</verbose>
                    <!-- this is false by default, forces the plugin to generate the git.properties file -->
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
                    <format>properties</format>
                    <skipPoms>true</skipPoms>
                    <injectAllReactorProjects>false</injectAllReactorProjects>
                    <failOnNoGitDirectory>true</failOnNoGitDirectory>
                    <failOnUnableToExtractRepoInfo>true</failOnUnableToExtractRepoInfo>
                    <skip>false</skip>
                    <runOnlyOnce>false</runOnlyOnce>
                    <excludeProperties>
                        <!-- <excludeProperty>git.user.*</excludeProperty> -->
                    </excludeProperties>
                    <includeOnlyProperties>
                        <!-- <includeOnlyProperty>^git.commit.id.full$</includeOnlyProperty> -->
                    </includeOnlyProperties>
                    <useNativeGit>false</useNativeGit>
                    <abbrevLength>7</abbrevLength>
                    <commitIdGenerationMode>flat</commitIdGenerationMode>
                    <gitDescribe>
                        <!-- don't generate the describe property -->
                        <skip>false</skip>
                        <!-- if no tag was found "near" this commit, just print the commit's id instead, helpful when you always expect this field to be not-empty -->
                        <always>false</always>
                        <!-- how many chars should be displayed as the commit object id? 7 is git's default, 0 has a special meaning (see end of this README.md), and 40 is the maximum value here -->
                        <abbrev>7</abbrev>
                        <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                        <dirty>-dirty</dirty>
                        <!-- Only consider tags matching the given pattern. This can be used to avoid leaking private tags from the repository. -->
                        <match>*</match>
                        <!-- always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. The distance will always be 0 if you're "on" the tag. -->
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>fi.livi.digitraffic.meri.AisApplication</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                            <Implementation-Build>${buildNumber}</Implementation-Build>
                            <AisApplication-Version>${project.version}</AisApplication-Version>
                            <AisApplication-Build>${buildNumber}</AisApplication-Build>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>fi.livi.digitraffic.meri.AisApplication</mainClass>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                        <manifestEntries>
                            <Implementation-Build>${buildNumber}</Implementation-Build>
                            <AisApplication-Version>${project.version}</AisApplication-Version>
                            <AisApplication-Build>${buildNumber}</AisApplication-Build>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-xjc-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <extensions>
                        <extension>org.apache.cxf.xjcplugins:cxf-xjc-dv:3.0.5</extension>
                    </extensions>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>xsdtojava</goal>
                        </goals>
                        <configuration>
                            <sourceRoot>${project.build.directory}/generated-sources/cxf</sourceRoot>
                            <xsdOptions>
                                <xsdOption>
                                    <xsd>${basedir}/src/main/resources/portnet/PortnetTypes.xsd</xsd>
                                    <packagename>fi.livi.digitraffic.meri.portnet.xsd</packagename>
                                </xsdOption>
                                <xsdOption>
                                    <xsd>${basedir}/src/main/resources/portnet/vesseldetails/VesselDetails.xsd</xsd>
                                    <packagename>fi.livi.digitraffic.meri.portnet.vesseldetails.xsd</packagename>
                                </xsdOption>
                                <xsdOption>
                                    <xsd>${basedir}/src/main/resources/portnet/vesseldetails/PortnetTypes.xsd</xsd>
                                    <packagename>fi.livi.digitraffic.meri.portnet.vesseldetails.xsd</packagename>
                                </xsdOption>
                            </xsdOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Enable to generate pojos from JSON schema
            <plugin>
                <groupId>org.jsonschema2pojo</groupId>
                <artifactId>jsonschema2pojo-maven-plugin</artifactId>
                <version>0.4.29</version>
                <configuration>
                    <sourceDirectory>${basedir}/src/main/resources/schema/</sourceDirectory>
                    <targetPackage>fi.livi.digitraffic.meri.json</targetPackage>
                    <outputDirectory>${project.build.directory}/generated-sources/json</outputDirectory>
                    <useCommonsLang3>true</useCommonsLang3>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->
        </plugins>
    </build>
</project>
